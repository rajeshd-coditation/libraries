import r from "react";
import e from "prop-types";
import d from "styled-components";
import { Field as x } from "../Field/Field.js";
import { FieldLabel as y } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as T } from "../Field/FieldHint.js";
import { FieldError as v } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Flex as F } from "../Flex/Flex.js";
import { useId as h } from "../helpers/useId.js";
import { Stack as k } from "../Stack/Stack.js";
import { TextButton as C } from "../TextButton/TextButton.js";
import { sizes as I } from "../themes/sizes.js";
import { ToggleCheckbox as O } from "../ToggleCheckbox/ToggleCheckbox.js";
const z = d(x)`
  max-width: 320px;
`, q = d(C)`
  align-self: flex-end;
  margin-left: auto;
`, o = ({
  disabled: t,
  size: p,
  error: s,
  hint: c,
  label: i,
  name: f,
  labelAction: u,
  required: g,
  id: b,
  onClear: l,
  clearLabel: n,
  checked: m,
  ...E
}) => {
  const a = h(b);
  return /* @__PURE__ */ r.createElement(z, { name: f, hint: c, error: s, id: a, required: g }, /* @__PURE__ */ r.createElement(k, { spacing: 1 }, /* @__PURE__ */ r.createElement(F, null, /* @__PURE__ */ r.createElement(y, { action: u }, i), n && l && m !== null && !t && /* @__PURE__ */ r.createElement(q, { onClick: l }, n)), /* @__PURE__ */ r.createElement(O, { id: a, size: p, checked: m, disabled: t, ...E }, i), /* @__PURE__ */ r.createElement(T, null), /* @__PURE__ */ r.createElement(v, null)));
};
o.displayName = "ToggleInput";
o.defaultProps = {
  checked: !1,
  clearLabel: void 0,
  disabled: !1,
  error: void 0,
  hint: void 0,
  id: void 0,
  label: "",
  labelAction: void 0,
  name: "",
  onClear: void 0,
  required: !1,
  size: "M"
};
o.propTypes = {
  checked: e.bool,
  clearLabel: e.string,
  disabled: e.bool,
  error: e.string,
  hint: e.oneOfType([e.string, e.node, e.arrayOf(e.node)]),
  id: e.string,
  label: e.string,
  labelAction: e.node,
  name: e.string,
  onClear: e.func,
  required: e.bool,
  size: e.oneOf(Object.keys(I.input))
};
export {
  o as ToggleInput
};
