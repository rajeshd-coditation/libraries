import r, { useState as S, useEffect as x } from "react";
import { dateTimePickerDefaultProps as C, dateTimePickerPropTypes as L } from "./DateTimePickerProps.js";
import { parseDate as y } from "./parseDate.js";
import { DatePicker as R } from "../DatePicker/DatePicker.js";
import { Field as b } from "../Field/Field.js";
import { FieldLabel as j } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as z } from "../Field/FieldHint.js";
import { FieldError as A } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { useId as B } from "../helpers/useId.js";
import { Stack as H } from "../Stack/Stack.js";
import { TimePicker as G } from "../TimePicker/TimePicker.js";
const M = ({
  ariaLabel: g,
  clearLabel: T,
  disabled: E,
  error: d,
  hint: p,
  label: l,
  labelAction: w,
  onChange: o,
  onClear: f,
  name: $,
  required: u,
  selectButtonTitle: h,
  size: k,
  step: F,
  value: a,
  ...P
}) => {
  const n = y(a), [i, m] = S(n), [c, s] = S(
    n ? `${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}` : null
  ), V = (e) => {
    m(e);
    let t;
    c ? (t = new Date(e), t.setHours(c.split(":")[0]), t.setMinutes(c.split(":")[1])) : (t = new Date(e), s(`${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}`)), o && o(t);
  }, I = (e) => {
    s(e);
    const t = i ? new Date(i) : new Date();
    t.setHours(e.split(":")[0]), t.setMinutes(e.split(":")[1]), i || m(t), o && o(t);
  }, _ = () => {
    m(void 0), s(void 0), f();
  }, v = () => {
    s(void 0);
    let e;
    i && (e = new Date(i), e.setHours("00"), e.setMinutes("00")), o && o(e);
  };
  x(() => {
    if (a && +a != +i) {
      const e = y(a);
      m(e), s(
        e ? `${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}` : null
      );
    } else
      a || (m(void 0), s(void 0));
  }, [a, i]);
  const D = B(P?.id);
  return /* @__PURE__ */ r.createElement(
    b,
    {
      name: $,
      role: "group",
      id: D,
      "aria-labelledby": D,
      hint: p,
      error: d,
      required: u
    },
    /* @__PURE__ */ r.createElement(H, { spacing: 1 }, l && /* @__PURE__ */ r.createElement(j, { action: w }, l), /* @__PURE__ */ r.createElement(H, { horizontal: !0, spacing: 2 }, /* @__PURE__ */ r.createElement(
      R,
      {
        "data-testid": "datetimepicker-date",
        id: D,
        name: $,
        ariaLabel: l || g,
        error: typeof d == "string",
        hint: typeof p == "string",
        selectedDate: i,
        selectedDateLabel: (e) => `Date picker, current is ${e}`,
        onChange: V,
        required: u,
        size: k,
        onClear: f && _,
        clearLabel: T,
        disabled: E,
        ...P
      }
    ), /* @__PURE__ */ r.createElement(
      G,
      {
        "data-testid": "datetimepicker-time",
        size: k,
        "aria-label": l || g,
        error: typeof d == "string",
        hint: typeof p == "string",
        value: c,
        onChange: I,
        onClear: f && v,
        clearLabel: T,
        required: u,
        selectButtonTitle: h,
        disabled: E,
        step: F
      }
    )), /* @__PURE__ */ r.createElement(z, null), /* @__PURE__ */ r.createElement(A, null))
  );
};
M.defaultProps = C;
M.propTypes = L;
export {
  M as DateTimePicker
};
